name: Solar System Workflow 1

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://cluster0.xsg5j.mongodb.net/'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
              nodejs_version: [18, 20]
              os: [ubuntu-latest, macos-latest]
              exclude:
                - nodejs_version: 18
                  os: macos-latest
        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}
    
        - name: Cache NPM deps
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code coverage
        container:
            image: node:18
        services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              options:
                --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 20
    
        - name: Install Dependencies
          run: npm install
    
        - name: Check code coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      runs-on: Ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Dockerhub login
          uses: docker/logic-action@v2.2.0
          with:
            # vars and secrets added in settings of repo under secrets and variables
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: Docker build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

    dev-deploy:
      needs: docker
      environment:
        name: development
        url: https://...
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        # add kubeconfig file in repo secrets
        - name: Set kubeconfig
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch k8 cluster details
          run: |
            kubectl version --short
            kubectl get nodes

        # Setting an environment variable
        - name: Save nginx ingress ip as an environment variable
          run: |
            echo "INGRESS_IP=${kubectl -n ingress-nginx get svc ingresss-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}"}" >> $GITHUB_ENV

        - name: Replace tokens in manifest files
          uses: cschleiden/replace-token@v1
          with:
            tokenPrefix: '{'
            tokenSuffix: '}'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            INGRESS_IP: ${{ env.INGRESS_IP }}

        - name: Create MongoDB secrets
          run: |
            kubectl create secret generic mongo-db-creds
        
        - name: Deploy to dev env
          run: |
            kubectl apply -f kubernetes/development